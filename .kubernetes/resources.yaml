kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{RESOURCE_NAME}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{RESOURCE_NAME}}"
  template:
    metadata:
      labels:
        app: "{{RESOURCE_NAME}}"
    spec:
      containers:
        - name: "{{RESOURCE_NAME}}"
          image: "{{CONTAINER_IMAGE}}:{{CONTAINER_IMAGE_TAG}}"
          env:
            - name: PORT
              value: "{{CONTAINER_PORT}}"
          ports:
            - name: http
              containerPort: {{CONTAINER_PORT}}
              protocol: TCP
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: "{{RESOURCE_NAME}}"
spec:
  ports:
  - name: "{{CONTAINER_PORT}}"
    port: {{CONTAINER_PORT}}
    protocol: TCP
    targetPort: {{CONTAINER_PORT}}
  selector:
    app: "{{RESOURCE_NAME}}"
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{RESOURCE_NAME}}"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    kubernetes.io/ingress.class: "{{DEPLOY_INGRESS_CLASS}}"
spec:
  # Looks like Traefik 2.5 does not support spec.ingressClassName =>
  # had to use the "kubernetes.io/ingress.class" annotation instead
  # ingressClassName: traefik
  tls:
  - hosts:
    - "{{DOMAIN_NAME}}"
    secretName: "{{RESOURCE_NAME}}-ingress-certificate-secret"

  rules:
    - host: "{{DOMAIN_NAME}}"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: "{{RESOURCE_NAME}}"
                port:
                  number: {{CONTAINER_PORT}}
